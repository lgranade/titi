- unless product.empty?
  / read new label or change
  - if item.empty? && order.type == Order::PACKAGING
    fieldset.action_container
      h2.action= t.production.packaging.add_next_item
      == slim :product_details, locals: {product: product}


      / Read new label
      p
        = t.production.packaging.scan_next_item
        b &nbsp#{product.p_name}

      - if item.empty?
        form action=url("/production/#{order.type.downcase}/#{order.o_id}/#{product.p_id}") method="post"
          == Rack::Csrf.tag(env)
          label.aligner_2 for="i_id" = t.sales.inventory_review.scan_label
          input.aligned autofocus="autofocus" required="required" type="text" name="i_id" id="i_id" size=15 maxlength=15 value="" placeholder="#{t.label.read_placeholder}"
          input type="submit" value="Aceptar"


      - if item.empty? && order.type == Order::PACKAGING
        / Select different product
        p
          |O podes&nbsp;
          a href="/admin/production/#{order.type.downcase}/#{order.o_id}" = t.order.select_other_product




  - unless item.empty?
    / Adding confirmation or removal
    fieldset.action_container

      h2.action Item agregado a la orden
      == slim :product_details, locals: {product: product}
      / Confirm addition
      form action=url("/production/#{order.type.downcase}/#{order.o_id}/#{product.p_id}") method="post"
        == Rack::Csrf.tag(env)
        label.aligner_2 for="fake_label" #{t.label.fields.label}
        input.aligned type="text" disabled="disabled" name="fake_label_id" value="#{item[:i_id]}"
        br
        br
        label.aligner_2 for="confirm" Si es correcto
        input.aligned  autofocus="autofocus" name="confirm" type="submit" value="#{t.actions.ok}"
      br
      / remove just added item
      form action=url("/production/#{order.type.downcase}/#{order.o_id}/item/remove") method="post"
        == Rack::Csrf.tag(env)
        input type="hidden"  name="i_id" value="#{item.i_id}"
        label.aligner_2 for="confirm" Si es Incorrecto
        input.aligned type="submit" value="#{t.actions.undo}"






/ Initial product selection
- unless products.empty?
  section#prod_list_selector
    form action=url("/production/#{order.type.downcase}/#{order.o_id}") method="post"
      == Rack::Csrf.tag(env)
      input type="text" class="visually_hidden" name="label" id="ajax_selected_label" value="#{params[:label]}"
      input type="hidden" name="o_id" value="#{order.o_id}"
      label.aligner_2 for="p_id" = t.sales.inventory_review.select_product
      input required="required" type="text" name="p_id" id="product_selector" size=15 maxlength=15 value="" placeholder="#{t.product.read_placeholder}"
      input type="submit" value="#{t.actions.ok}"

    h2 = t.production.select_product
    == slim :products_list, locals: {price_pro_col: false, full_rows: false, show_edit_button: true, edit_link: "#{order.type.downcase}_add", order: order, products: products}




/ Current items in order and removal option
- if order.type == Order::PACKAGING
  h2 Items agregados a esta orden
  == slim :items_list, locals: {items: items, show_filters: false, price_pro_col: false}
/ Remove single item
- unless items.empty?
  a href="/admin/production/#{order.type.downcase}/#{order.o_id}/item/remove" Remover un item de la orden


- unless items.empty?
  form.v_island_1#finish_packaging action=url("/production/#{order.type.downcase}/#{order.o_id}/finish") method="post"
    == Rack::Csrf.tag(env)
    input type="hidden" name="o_id" value="#{order.o_id}"
    input type="submit" value="#{t.actions.finish}"

form.v_island_1#finish_packaging action=url("/production/#{order.type.downcase}/#{order.o_id}/cancel") method="post"
  == Rack::Csrf.tag(env)
  input type="hidden" name="o_id" value="#{order.o_id}"
  input.ajax_confirm data-confirm_message="#{t.order.sure_to_cancel_load_order}" type="submit" value="#{t.actions.cancel_order}"
